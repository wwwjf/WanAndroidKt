package com.xianghe.ivy.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xianghe.ivy.entity.db.VideoPushCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_PUSH_CACHE".
*/
public class VideoPushCacheDao extends AbstractDao<VideoPushCache, Long> {

    public static final String TABLENAME = "VIDEO_PUSH_CACHE";

    /**
     * Properties of entity VideoPushCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, long.class, "uid", false, "UID");
        public final static Property Director = new Property(2, String.class, "director", false, "DIRECTOR");
        public final static Property Player = new Property(3, String.class, "player", false, "PLAYER");
    }


    public VideoPushCacheDao(DaoConfig config) {
        super(config);
    }
    
    public VideoPushCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_PUSH_CACHE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"DIRECTOR\" TEXT," + // 2: director
                "\"PLAYER\" TEXT);"); // 3: player
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_PUSH_CACHE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoPushCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(3, director);
        }
 
        String player = entity.getPlayer();
        if (player != null) {
            stmt.bindString(4, player);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoPushCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUid());
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(3, director);
        }
 
        String player = entity.getPlayer();
        if (player != null) {
            stmt.bindString(4, player);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoPushCache readEntity(Cursor cursor, int offset) {
        VideoPushCache entity = new VideoPushCache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // director
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // player
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoPushCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getLong(offset + 1));
        entity.setDirector(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlayer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoPushCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoPushCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoPushCache entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
